document.addEventListener('DOMContentLoaded', () => {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º DOM
    const canvas = document.getElementById('roulette-canvas');
    const spinButton = document.getElementById('spin-button');
    const modal = document.getElementById('result-modal');
    const resultText = document.getElementById('result-text');
    const closeModalButton = document.getElementById('close-modal-button');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.ready(); // –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é

    const ctx = canvas.getContext('2d');

    // --- –ù–ê–°–¢–†–û–ô–ö–ò –†–£–õ–ï–¢–ö–ò ---
    // –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤. –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —Å–µ–∫—Ç–æ—Ä—ã.
    const segments = [
        { color: '#FDFD96', label: '10 üçÑ' },
        { color: '#FFB3B3', label: '–ù–∏—á–µ–≥–æ' },
        { color: '#C1FFD7', label: '–°–∫–∏–¥–∫–∞ 5%' },
        { color: '#FFDDC1', label: '25 üçÑ' },
        { color: '#B3E0FF', label: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞' },
        { color: '#FFB3E6', label: '–°–∫–∏–¥–∫–∞ 10%' },
        { color: '#D7B3FF', label: '50 üçÑ' },
        { color: '#B3FFFF', label: '100 üçÑ' }
    ];

    const segmentCount = segments.length;
    const anglePerSegment = 2 * Math.PI / segmentCount;
    const radius = canvas.width / 2;
    let currentRotation = 0; // –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª–µ—Å–∞
    let isSpinning = false;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–ª–µ—Å–∞ —Ä—É–ª–µ—Ç–∫–∏
    function drawRoulette() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.save();
        ctx.translate(radius, radius); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ü–µ–Ω—Ç—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä canvas

        segments.forEach((segment, i) => {
            const startAngle = i * anglePerSegment;
            const endAngle = startAngle + anglePerSegment;

            // –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.arc(0, 0, radius - 5, startAngle, endAngle); // -5 –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ –æ—Ç –∫—Ä–∞—è
            ctx.closePath();
            ctx.fillStyle = segment.color;
            ctx.fill();
            ctx.stroke(); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

            // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–∫—Ç–æ—Ä–µ
            ctx.save();
            ctx.fillStyle = '#333';
            ctx.font = 'bold 16px Montserrat';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
            const textAngle = startAngle + anglePerSegment / 2;
            ctx.rotate(textAngle);
            ctx.fillText(segment.label, radius * 0.65, 0); // 0.65 - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
            ctx.restore();
        });
        ctx.restore();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è
    function spin() {
        if (isSpinning) return;
        isSpinning = true;
        spinButton.disabled = true; // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        spinButton.textContent = '–£–î–ê–ß–ò!';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        const randomStopAngle = Math.random() * (2 * Math.PI);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        const fullSpins = 5 * (2 * Math.PI);
        const totalRotation = fullSpins + randomStopAngle;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS transition –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
        canvas.style.transform = `rotate(${totalRotation}rad)`;
        currentRotation = totalRotation;

        // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å transition –≤ CSS)
        setTimeout(announceResult, 6200); // 6000ms –∞–Ω–∏–º–∞—Ü–∏—è + 200ms –∑–∞–ø–∞—Å
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    function announceResult() {
        // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É–≥–æ–ª (–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 2*PI)
        const finalAngle = currentRotation % (2 * Math.PI);

        // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞.
        const pointerPosition = (2 * Math.PI) - finalAngle + (anglePerSegment / 2);
        const winningIndex = Math.floor(pointerPosition / anglePerSegment) % segmentCount;
        const winningSegment = segments[winningIndex];

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        showModal(winningSegment.label);

        isSpinning = false;
        // –ö–Ω–æ–ø–∫—É –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    function showModal(prize) {
        if (prize === '–ù–∏—á–µ–≥–æ' || prize === '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞') {
             resultText.innerHTML = `–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ. <br>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <strong>${prize}</strong>`;
        } else {
             resultText.innerHTML = `–í–∞—à –≤—ã–∏–≥—Ä—ã—à: <strong>${prize}</strong>`;
        }
        modal.classList.add('visible');
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    function closeModal() {
        modal.classList.remove('visible');
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è Telegram –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ Mini App
        tg.close();
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    spinButton.addEventListener('click', spin);
    closeModalButton.addEventListener('click', closeModal);

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–ª–µ—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    drawRoulette();
});
